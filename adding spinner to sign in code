{{ 'customer.css' | asset_url | stylesheet_tag }}
<script src="{{ 'password-hide.js' | asset_url }}" defer="defer"></script>

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  

.spinner {
  animation: spin 1s linear infinite;
  vertical-align: middle;
}
@keyframes spin {
  100% {
    transform: rotate(360deg);
  }
}


{%- endstyle -%}

{%- if section.settings.enable_shop_login_button == false -%}
  {%- assign hide_shop_login_button = true -%}
{%- endif -%}

<div class="customer login section-{{ section.id }}-padding">
  <h1 id="recover" tabindex="-1">
    {% comment %} {{ 'customer.recover_password.title' | t }} {% endcomment %}
  </h1>
  <div>
    {% comment %}
      <p>
        {{ 'customer.recover_password.subtext' | t }}
      </p>
    {% endcomment %}
    {% comment %}
      <p>
        {{ 'customer.recover_password.subtext' | t }}
      </p>
    {% endcomment %}

    {%- form 'recover_customer_password', class: 'hidden' -%}
      {% assign recover_success = form.posted_successfully? %}
      <div class="field ">
        <input
          type="email"
          value=""
          name="email"
          id="RecoverEmail"
          autocorrect="off"
          autocapitalize="off"
          autocomplete="email"
          {% if form.errors %}
            aria-invalid="true"
            aria-describedby="RecoverEmail-email-error"
            autofocus
          {% endif %}
          placeholder="{{ 'customer.login_page.email' | t }}"
        >
        <label for="RecoverEmail">
          {{ 'customer.login_page.email' | t }}
        </label>
      </div>
      {%- if form.errors -%}
        <small id="RecoverEmail-email-error" class="form__message">
          <span class="svg-wrapper">
            {{- 'icon-error.svg' | inline_asset_content -}}
          </span>
          {{ form.errors.messages.form }}
        </small>
      {%- endif -%}

      <button>
        {{ 'customer.login_page.submit' | t }}
      </button>

      <a href="#login">
        {{ 'customer.login_page.cancel' | t }}
      </a>
    {%- endform -%}
  </div>

  <div class="flex items-center justify-between login-form_heading">
    <h1
      class="text-[2.8rem] text-[#253746] font-['garamond-premier-pro',serif] place-self-start"
      id="login"
      tabindex="-1"
    >
      {{ 'customer.login_page.sign_in' | t }}
    </h1>
    {% comment %} <a href="{{ routes.account_register_url }}" class="!m-0"><span>ssI donâ€™t have an account</span></a> {% endcomment %}
  </div>
  <div>
    {%- if recover_success == true -%}
      <h3 class="form__message" tabindex="-1" autofocus>
        <span class="svg-wrapper">
          {{- 'icon-success.svg' | inline_asset_content -}}
        </span>
        {{ 'customer.recover_password.success' | t }}
      </h3>
    {%- endif -%}
    {%- form 'customer_login', novalidate: 'novalidate', class: '!mt-[2rem]' -%}
      {%- assign has_errors = false -%}
      {%- if form.errors -%}
        {%- assign has_errors = true -%}

        <h2 class="form__message" tabindex="-1" autofocus>
          <span class="visually-hidden">{{ 'accessibility.error' | t }} </span>
          <span class="svg-wrapper">
            {{- 'icon-error.svg' | inline_asset_content -}}
          </span>
          {{ 'templates.contact.form.error_heading' | t }}
        </h2>
        {{ form.errors | default_errors }}
      {%- endif -%}

      {%- if shop.features.login_with_shop_classic_customer_accounts? -%}
        <section name="sign-in-with-shop-provider">
          {{ shop | login_button: hide_button: hide_shop_login_button }}

          {%- unless hide_shop_login_button -%}
            <p>
              {{ 'customer.login_page.alternate_provider_separator' | t }}
            </p>
          {%- endunless -%}
        </section>
      {%- endif -%}

      <div class="divider">
        <span class="mx-4 text-bodycolor text-bodysize text-dsRegular">
          {{- 'customer.login_page.alternate_provider_separator' | t -}}
        </span>
      </div>

      <div class="field-login border border-[#c6c6c6] field-of-form">
        <div class="email-input-field field  {% if has_errors and form.errors contains 'email' %} field--error {% endif %}">
          <input
            type="email"
            name="customer[email]"
            id="CustomerEmail"
            autocomplete="email"
            autocorrect="off"
            autocapitalize="off"
            {% if form.errors contains 'form' %}
              aria-invalid="true"
            {% endif %}
            placeholder="{{ 'customer.login_page.email' | t }}"
          >
          <label for="CustomerEmail">
            {{ 'customer.login_page.email' | t }}
          </label>
        </div>
        <div class="hidden error-message" id="email-error" data-variant="error" role="alert">
          <span class="">Please enter a valid email address.</span>
        </div>
        {%- if has_errors and form.errors contains 'email' -%}
          <div class="error-message" data-variant="error" role="alert">
            <span>
              {{ form.errors.translated_fields.email | capitalize }}
              {{ form.errors.messages.email }}.
            </span>
          </div>
        {%- endif -%}
        <div class="divider"></div>
        {% comment %} <span class="block w-11/12 border-t-2 border-[#c6c6c6] justify-self-center"></span> {% endcomment %}

        {%- if form.password_needed -%}
          <div class="field {% if has_errors and form.errors contains 'password' %} field--error {% endif %}">
            <input
              type="password"
              name="customer[password]"
              id="CustomerPassword"
              autocomplete="current-password"
              placeholder="{{ 'customer.login_page.password' | t }}"
            >
            <label for="CustomerPassword">{{ 'customer.login_page.password' | t }}</label>
            <button type="button" class="toggle-password button" aria-label="Show password">
              <span aria-hidden="true" class="hidden icon eye-filled-icon" data-icon="eye-anf"></span>
              <span aria-hidden="true" class="icon eye-icon " data-icon="eye-filled-anf"></span>
            </button>
          </div>
          <div class="hidden error-message" id="password-error" data-variant="error" role="alert">
            <span class="">Please enter a valid password.</span>
          </div>
          {%- if has_errors and form.errors contains 'password' -%}
            <div class="error-message" data-variant="error" role="alert">
              <span>
                {{ form.errors.translated_fields.password | capitalize }}
                {{ form.errors.messages.password }}.
              </span>
            </div>
          {%- endif -%}
        {%- endif -%}
      </div>

      <!-- Keep Me Signed In -->

      <div class="flex items-center gap-2 mt-4 login-btm">
        <input
          id="keep-signed-in"
          name="keep-signed-in"
          type="checkbox"
          class="bg-white border border-[#253746] text-[#253746] w-[25px] h-[25px] text-center"
        >
        <span aria-hidden="true" class="icon" data-icon="check-anf-text" data-testid="icon"></span>
        <label for="keep-signed-in" class="text-[1.5rem] text-[#1c1c1c] cursor-pointer">
          {{- 'customer.login_page.keep_me_signed' | t -}}
        </label>
        <button
          type="button"
          aria-controls="keep-me-signed-in-tooltip"
          aria-expanded="false"
          class="!text-primary !min-w-0 !px-8 tooltip-container"
        >
          <span
            aria-hidden="true"
            class="icon"
            data-icon="question-outline"
            data-testid="icon"
          ></span>
          <span aria-hidden="true" class="tooltip-icon" data-testid="tooltip-icon"></span>
          {% if settings.signed_in_tooltip_content %}
            <span class="tooltip-text">
              {{ settings.signed_in_tooltip_content | escape }}
            </span>
          {% endif %}
        </button>
      </div>

      {% comment %} {% if has_errors %} {% endcomment %}
      <div class="my-4 error-message hidden " id="incorrent-error" data-variant="error" role="alert">
        <span class="">Please correct the invalid fields.</span>
      </div>
      {% comment %} {% endif %} {% endcomment %}
      <div id="hcaptcha-container"></div>
      <div class="flex flex-col items-center gap-2 my-8">
        {% comment %} <button
  class="button w-full h-[7vh] login-button flex items-center justify-center gap-2 bg-[#12202f] text-white font-semibold"
  type="button"
  id="loginBtn"
>
  <!-- Spinner on LEFT -->
  <span class="login-spinner hidden">
    <svg
      aria-hidden="true"
      class="w-5 h-5 animate-spin text-black"
      viewBox="0 0 100 101"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M100 50.5908C100 78.2051 77.6142 100.591 
           50 100.591C22.3858 100.591 0 78.2051 0 
           50.5908C0 22.9766 22.3858 0.59082 50 
           0.59082C77.6142 0.59082 100 22.9766 
           100 50.5908ZM9.08144 50.5908C9.08144 
           73.1895 27.4013 91.5094 50 91.5094C72.5987 
           91.5094 90.9186 73.1895 90.9186 
           50.5908C90.9186 27.9921 72.5987 9.67226 
           50 9.67226C27.4013 9.67226 9.08144 
           27.9921 9.08144 50.5908Z"
        fill="currentColor"
      />
      <path
        d="M93.9676 39.0409C96.393 38.4038 
           97.8624 35.9116 97.0079 33.5539C95.2932 
           28.8227 92.871 24.3692 89.8167 
           20.348C85.8452 15.1192 80.8826 10.7238 
           75.2124 7.41289C69.5422 4.10194 63.2754 
           1.94025 56.7698 1.05124C51.7666 
           0.367541 46.6976 0.446843 41.7345 
           1.27873C39.2613 1.69328 37.813 
           4.19778 38.4501 6.62326C39.0873 
           9.04874 41.5694 10.4717 44.0505 
           10.1071C47.8511 9.54855 51.7191 
           9.52689 55.5402 10.0491C60.8642 
           10.7766 65.9928 12.5457 70.6331 
           15.2552C75.2735 17.9648 79.3347 
           21.5619 82.5849 25.841C84.9175 
           28.9121 86.7997 32.2913 88.1811 
           35.8758C89.083 38.2158 91.5421 
           39.6781 93.9676 39.0409Z"
        fill="currentFill"
      />
    </svg>
  </span>

  <!-- Text on RIGHT -->
  <span class="login-text">{{ 'customer.login_page.sign_in' | t }}</span>
</button>  {% endcomment %}


       <button class="button w-full h-[7vh] login-button" type="submit">
          {{ 'customer.login_page.sign_in' | t }}
        </button> 
      <modal-opener data-modal="#CreateAccountModal" class="w-full">
        
        <button
          onclick="document.querySelector('#CreateAccountModal').classList.remove('hidden')"
          class="login-sign-btn w-full h-[7vh] hover:bg-[#253746] hover:text-white"
        >
          <p>{{ 'customer.login_page.create_account' | t }}</p>
        </button>
      </modal-opener>
    

        {%- if form.password_needed -%}
          <modal-opener data-modal="#ResetPasswordModal">
            <button class="reset-pwd-btn">{{ 'customer.login_page.forgot_password' | t }}</button>
          </modal-opener>
        {%- endif -%}
      </div>
    {%- endform -%}
    {% comment %}
      <button
        onclick="document.querySelector('#CreateAccountModal').classList.remove('hidden')"
        class="login-sign-btn w-full h-[7vh] mt-4"
      >
        <p>{{ 'customer.login_page.create_account' | t }}</p>
      </button>
      <modal-opener data-modal="#ResetPasswordModal">
        <button class="reset-pwd-btn">{{ 'customer.login_page.forgot_password' | t }}</button>
      </modal-opener>
    {% endcomment %}
  </div>

  {% comment %}
    <div class="divider">
      <span>{{- 'customer.login_page.alternate_provider_separator' | t -}}</span>
    </div>
    <div class="flex flex-col">
      <p class="text-[#5e5e5e] text-[1.3rem] font-semibold">Signed Up for myAbercrombie in Store?</p>
      <modal-opener data-modal="#ResetPasswordModal">
        <button class="reset-pwd-btn">Create a Password</button>
      </modal-opener>
    </div>
  {% endcomment %}

  {%- if shop.checkout.guest_login -%}
    <div>
      <hr>
      <h2>{{ 'customer.login_page.guest_title' | t }}</h2>

      {%- form 'guest_login' -%}
        <button
          onclick="document.querySelector('#ResetPasswordModal').classList.remove('hidden')"
        >
          <p>Reset Password</p>
        </button>
      {%- endform -%}
    </div>
  {%- endif -%}
</div>

{% schema %}
{
  "name": "t:sections.main-login.name",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_shop_login_button",
      "label": "t:sections.main-login.shop_login_button.enable",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let checkBtn = false;
    const loginForm = document.getElementById('customer_login');
    const emailInput = document.getElementById('CustomerEmail');
    const passwordInput = document.getElementById('CustomerPassword');
    const emailError = document.getElementById('email-error');
    const passwordError = document.getElementById('password-error');
    const invalidError = document.getElementById('incorrent-error');

    const modal = document.getElementById('LoginModal');
    const closeBtn = document.getElementById('ModalClose-Login');
    

    if (!loginForm || !modal) return; // safety check

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]).{8,25}$/;

    emailInput.addEventListener('input', () => {
      // Only validate if data-filled is not set

      if (checkBtn) {
        const email = emailInput.value.trim();
        // Validate email
        if (!email || !emailRegex.test(email)) {
          emailInput.setAttribute('aria-invalid', 'true');
          emailError.classList.remove('hidden');
          valid = false;
        } else {
          emailInput.setAttribute('aria-invalid', 'false');
          emailError.classList.add('hidden');
        }
      }
    });

    passwordInput.addEventListener('input', () => {
      // Only validate if data-filled is not set

      if (checkBtn) {
        const password = passwordInput.value.trim();
        console.log(password);

        // Validate email
        if (!passwordRegex.test(password)) {
          passwordInput.setAttribute('aria-invalid', 'true');
          passwordError.classList.remove('hidden');
          valid = false;
        } else {
          passwordInput.setAttribute('aria-invalid', 'false');
          passwordError.classList.add('hidden');
        }
      }
    });
    // âœ… Form submit with validation + AJAX
    loginForm.addEventListener('submit', function (e) {
      checkBtn = true;
      console.log('kkkkkkk kkkkksss');
      const HCAPTCHA_SITEKEY = 'f06e6c50-85a8-45c8-87d0-21a2b65856fe';

      e.preventDefault();
      e.stopImmediatePropagation();
      const btn = e.submitter;

      if (btn.classList.contains('login-button')) {
        let valid = true;

        const email = emailInput.value.trim();
        const password = passwordInput.value.trim();
        resetErrors();

        // Validate email
        if (!email || !emailRegex.test(email)) {
          emailInput.setAttribute('aria-invalid', 'true');
          emailError.classList.remove('hidden');
          invalidError.classList.remove('hidden');
          valid = false;
        } else {
          emailInput.setAttribute('data-filled', 'true');
        }

        // Validate password
        if (!password) {
          passwordInput.setAttribute('aria-invalid', 'true');
          passwordError.classList.remove('hidden');
          invalidError.classList.remove('hidden');
          valid = false;
        }

        if (!valid) return false;

        let widgetId = null;
        console.log(HCAPTCHA_SITEKEY);
         
       
        btn.setAttribute('aria-disabled', 'true'); 
        btn.innerText = 'Processing'; 
        btn.disabled = true;
        

 // also disable click for accessibility 

        widgetId = hcaptcha.render('hcaptcha-container', {
          sitekey: HCAPTCHA_SITEKEY,
          size: 'invisible',
          callback: (token) => {
            console.log('hCaptcha token:', token);
            const formData = new URLSearchParams();
            formData.append('form_type', 'customer_login');
            formData.append('utf8', 'âœ“');
            formData.append('customer[email]', email);
            formData.append('customer[password]', password);
            formData.append('h-captcha-response', token);

            fetch('/account/login', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
              },
              credentials: 'include', // send cookies
              body: formData.toString(),
            })
              .then((res) => res.text()) // Shopify returns HTML, not JSON
              .then((html) => {
                btn.disabled = false;
                btn.innerText = 'Sign In';
                btn.setAttribute('aria-disabled', 'false');
                // Parse the HTML string into a DOM
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');

                // Example: Shopify shows login errors inside `.form__message`
                const errorEl = doc.querySelector('.form__message');

                if (errorEl) {
                  console.error('Login failed:', errorEl.innerText.trim());
                  document.querySelector('#login-error').innerText = errorEl.innerText.trim();
                } else {
                  console.log('Login success âœ…');
                  window.location.reload(); // or redirect to /account
                }
              })
              .catch((err) => {
                btn.setAttribute('aria-disabled', 'false');
                btn.disabled = false;
                btn.innerText = 'Sign In';
                console.error('Login error:', err);
                invalidError.textContent = 'Something went wrong. Try again.';
                invalidError.classList.remove('hidden');

                invalidError.classList.remove('hidden');
                emailInput.setAttribute('aria-invalid', 'true');
                emailError.classList.remove('hidden');
                invalidError.classList.remove('hidden');
                invalidError.textContent = data.message || 'Invalid login.';
              });
          },
        });

        hcaptcha.execute(widgetId);
      }
    });

    // âœ… Reset errors helper
    function resetErrors() {
      emailError.classList.add('hidden');
      passwordError.classList.add('hidden');
      invalidError.classList.add('hidden');
      emailInput.setAttribute('aria-invalid', 'false');
      passwordInput.setAttribute('aria-invalid', 'false');
    }

    // âœ… Reset form completely (fields + errors)
    function resetForm() {
      loginForm.reset();
      resetErrors();
    }

    // âœ… Modal controls
    function openModal() {
      modal.classList.remove('hidden');
      modal.setAttribute('open', 'true');
      document.body.style.overflow = 'hidden';
    }

    function closeModal() {
      modal.classList.add('hidden');
      modal.removeAttribute('open');
      document.body.style.overflow = 'auto';
      resetForm();
    }

    closeBtn.addEventListener('click', closeModal);

    // âœ… Close modal when clicking outside dialog
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
  });
</script>
<script>
  // Select the icon with data-icon="check-anf-text"
  const icon = document.querySelector('[data-icon="check-anf-text"]');

  // Select the checkbox
  const checkbox = document.getElementById('keep-signed-in');

  // Toggle checkbox when icon is clicked
  icon.addEventListener('click', () => {
    checkbox.checked = !checkbox.checked;
    checkbox.dispatchEvent(new Event('change')); // optional, triggers any change listeners
  });
</script>
{% comment %} <script>
  document.addEventListener('DOMContentLoaded', function () {
  const loginBtn = document.getElementById('loginBtn');
  const spinner = loginBtn.querySelector('.login-spinner');
  const text = loginBtn.querySelector('.login-text');

  loginBtn.addEventListener('click', function () {
    // Show spinner + change text + background color
    spinner.classList.remove('hidden');
    text.textContent = 'Processing...';
    loginBtn.style.backgroundColor = '#e5e5e5'; // light gray
    loginBtn.style.color = '#000'; // black text for contrast

    // Optional: restore state after few seconds
    setTimeout(() => {
      spinner.classList.add('hidden');
      text.textContent = 'Sign In';
      loginBtn.style.backgroundColor = '#12202f'; // original navy
      loginBtn.style.color = '#fff';
    }, 3000);
  });
});  


</script> {% endcomment %}
